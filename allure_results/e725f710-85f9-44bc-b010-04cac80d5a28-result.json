{"name": "Проверка появления только что созданного заказа в ленте заказов", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button type=\"button\" class=\"Modal_modal__close_modified__3V5XS Modal_modal__close__TnseK\">...</button> is not clickable at point (1266, 195). Other element would receive the click: <div class=\"Modal_modal_overlay__x2ZCr\"></div>\n  (Session info: chrome=125.0.6422.142)\nStacktrace:\n\tGetHandleVerifier [0x005BB8E3+45827]\n\t(No symbol) [0x0054DCC4]\n\t(No symbol) [0x0044150F]\n\t(No symbol) [0x00488052]\n\t(No symbol) [0x004863D8]\n\t(No symbol) [0x0048425B]\n\t(No symbol) [0x00483823]\n\t(No symbol) [0x004785EF]\n\t(No symbol) [0x004A2DFC]\n\t(No symbol) [0x00478075]\n\t(No symbol) [0x004A3094]\n\t(No symbol) [0x004BC034]\n\t(No symbol) [0x004A2B96]\n\t(No symbol) [0x00476998]\n\t(No symbol) [0x0047751D]\n\tGetHandleVerifier [0x00874513+2899763]\n\tGetHandleVerifier [0x008C793D+3240797]\n\tGetHandleVerifier [0x006413B4+593364]\n\tGetHandleVerifier [0x006482DC+621820]\n\t(No symbol) [0x005570A4]\n\t(No symbol) [0x005537A8]\n\t(No symbol) [0x00553947]\n\t(No symbol) [0x005459FE]\n\tBaseThreadInitThunk [0x77B1FCC9+25]\n\tRtlGetAppContainerNamedObjectPath [0x77C67C6E+286]\n\tRtlGetAppContainerNamedObjectPath [0x77C67C3E+238]", "trace": "self = <pages.basic_functionality_page.BasicFunctionality object at 0x000002B4DCD3ED90>\nelement = <selenium.webdriver.remote.webelement.WebElement (session=\"86894063ea9e603d36d2ff4f0ee9eca2\", element=\"f.37CC11AEAFA00E7C5D11D1473538DDE1.d.EE8086C43A5245BC8C5D1EE2935B4F8F.e.100\")>\n\n    def click_element_with_retry(self, element):\n        try:\n>           element.click()\n\npages\\base_page.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002B4DCD7BF90>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77C67C6E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77C67C3E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button type=\"button\" class=\"Modal_modal__close_modified__3V5XS Modal_modal__close__TnseK\">...</button> is not clickable at point (1266, 195). Other element would receive the click: <div class=\"Modal_modal_overlay__x2ZCr\"></div>\nE         (Session info: chrome=125.0.6422.142)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x005BB8E3+45827]\nE       \t(No symbol) [0x0054DCC4]\nE       \t(No symbol) [0x0044150F]\nE       \t(No symbol) [0x00488052]\nE       \t(No symbol) [0x004863D8]\nE       \t(No symbol) [0x0048425B]\nE       \t(No symbol) [0x00483823]\nE       \t(No symbol) [0x004785EF]\nE       \t(No symbol) [0x004A2DFC]\nE       \t(No symbol) [0x00478075]\nE       \t(No symbol) [0x004A3094]\nE       \t(No symbol) [0x004BC034]\nE       \t(No symbol) [0x004A2B96]\nE       \t(No symbol) [0x00476998]\nE       \t(No symbol) [0x0047751D]\nE       \tGetHandleVerifier [0x00874513+2899763]\nE       \tGetHandleVerifier [0x008C793D+3240797]\nE       \tGetHandleVerifier [0x006413B4+593364]\nE       \tGetHandleVerifier [0x006482DC+621820]\nE       \t(No symbol) [0x005570A4]\nE       \t(No symbol) [0x005537A8]\nE       \t(No symbol) [0x00553947]\nE       \t(No symbol) [0x005459FE]\nE       \tBaseThreadInitThunk [0x77B1FCC9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77C67C6E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77C67C3E+238]\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_order_feed.TestOrderFeed object at 0x000002B4DC418550>, driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"86894063ea9e603d36d2ff4f0ee9eca2\")>\n\n    @allure.title('Проверка появления только что созданного заказа в ленте заказов')\n    def test_new_order_at_order_feed(self, driver):\n        order_feed_page = OrderFeedPage(driver)\n        basic_functionality_page = BasicFunctionality(driver)\n    \n        basic_functionality_page.personal_account_login()\n        basic_functionality_page.add_filling_to_order()\n        basic_functionality_page.click_order_button()\n        order_id = basic_functionality_page.get_order_id\n>       basic_functionality_page.click_close_button()\n\ntests\\test_order_feed.py:59: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\basic_functionality_page.py:86: in click_close_button\n    self.click_element_with_retry(button)\npages\\base_page.py:22: in click_element_with_retry\n    WebDriverWait(self.driver, 10).until(EC.element_to_be_clickable(element)).click()\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002B4DCD7BF90>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77C67C6E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77C67C3E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button type=\"button\" class=\"Modal_modal__close_modified__3V5XS Modal_modal__close__TnseK\">...</button> is not clickable at point (1266, 195). Other element would receive the click: <div class=\"Modal_modal_overlay__x2ZCr\"></div>\nE         (Session info: chrome=125.0.6422.142)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x005BB8E3+45827]\nE       \t(No symbol) [0x0054DCC4]\nE       \t(No symbol) [0x0044150F]\nE       \t(No symbol) [0x00488052]\nE       \t(No symbol) [0x004863D8]\nE       \t(No symbol) [0x0048425B]\nE       \t(No symbol) [0x00483823]\nE       \t(No symbol) [0x004785EF]\nE       \t(No symbol) [0x004A2DFC]\nE       \t(No symbol) [0x00478075]\nE       \t(No symbol) [0x004A3094]\nE       \t(No symbol) [0x004BC034]\nE       \t(No symbol) [0x004A2B96]\nE       \t(No symbol) [0x00476998]\nE       \t(No symbol) [0x0047751D]\nE       \tGetHandleVerifier [0x00874513+2899763]\nE       \tGetHandleVerifier [0x008C793D+3240797]\nE       \tGetHandleVerifier [0x006413B4+593364]\nE       \tGetHandleVerifier [0x006482DC+621820]\nE       \t(No symbol) [0x005570A4]\nE       \t(No symbol) [0x005537A8]\nE       \t(No symbol) [0x00553947]\nE       \t(No symbol) [0x005459FE]\nE       \tBaseThreadInitThunk [0x77B1FCC9+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77C67C6E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77C67C3E+238]\n\n..\\..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException"}, "steps": [{"name": "Предусловие входа в аккаунт", "status": "passed", "steps": [{"name": "Кликаем на кнопку \"Войти в аккаунт\"", "status": "passed", "start": 1718102453241, "stop": 1718102453400}, {"name": "Ввод email", "status": "passed", "start": 1718102453400, "stop": 1718102453738}, {"name": "Ввод пароля", "status": "passed", "start": 1718102453738, "stop": 1718102454030}, {"name": "Клик на кнопку \"Войти\"", "status": "passed", "start": 1718102454030, "stop": 1718102454175}], "start": 1718102453241, "stop": 1718102454175}, {"name": "Перетаскивание ингредиента", "status": "passed", "start": 1718102454176, "stop": 1718102455477}, {"name": "Клик \"Оформить заказ\"", "status": "passed", "start": 1718102455477, "stop": 1718102455579}, {"name": "Окно закрывается кликом по крестику", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button type=\"button\" class=\"Modal_modal__close_modified__3V5XS Modal_modal__close__TnseK\">...</button> is not clickable at point (1266, 195). Other element would receive the click: <div class=\"Modal_modal_overlay__x2ZCr\"></div>\n  (Session info: chrome=125.0.6422.142)\nStacktrace:\n\tGetHandleVerifier [0x005BB8E3+45827]\n\t(No symbol) [0x0054DCC4]\n\t(No symbol) [0x0044150F]\n\t(No symbol) [0x00488052]\n\t(No symbol) [0x004863D8]\n\t(No symbol) [0x0048425B]\n\t(No symbol) [0x00483823]\n\t(No symbol) [0x004785EF]\n\t(No symbol) [0x004A2DFC]\n\t(No symbol) [0x00478075]\n\t(No symbol) [0x004A3094]\n\t(No symbol) [0x004BC034]\n\t(No symbol) [0x004A2B96]\n\t(No symbol) [0x00476998]\n\t(No symbol) [0x0047751D]\n\tGetHandleVerifier [0x00874513+2899763]\n\tGetHandleVerifier [0x008C793D+3240797]\n\tGetHandleVerifier [0x006413B4+593364]\n\tGetHandleVerifier [0x006482DC+621820]\n\t(No symbol) [0x005570A4]\n\t(No symbol) [0x005537A8]\n\t(No symbol) [0x00553947]\n\t(No symbol) [0x005459FE]\n\tBaseThreadInitThunk [0x77B1FCC9+25]\n\tRtlGetAppContainerNamedObjectPath [0x77C67C6E+286]\n\tRtlGetAppContainerNamedObjectPath [0x77C67C3E+238]\n\n", "trace": "  File \"C:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"C:\\Users\\User\\Desktop\\Обучение\\Diplom_Mikhail_Bobkov_7\\Diplom_3\\pages\\basic_functionality_page.py\", line 86, in click_close_button\n    self.click_element_with_retry(button)\n  File \"C:\\Users\\User\\Desktop\\Обучение\\Diplom_Mikhail_Bobkov_7\\Diplom_3\\pages\\base_page.py\", line 22, in click_element_with_retry\n    WebDriverWait(self.driver, 10).until(EC.element_to_be_clickable(element)).click()\n  File \"C:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 94, in click\n    self._execute(Command.CLICK_ELEMENT)\n  File \"C:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py\", line 395, in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 347, in execute\n    self.error_handler.check_response(response)\n  File \"C:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1718102455579, "stop": 1718102458450}], "parameters": [{"name": "driver", "value": "'chrome'"}], "start": 1718102453241, "stop": 1718102458452, "uuid": "5f10bec3-d1ac-4322-9960-b900c1261187", "historyId": "29d8f6a6e70055cfbd26b6d99de4e099", "testCaseId": "cc935bf715d8fdf44b2135da44cb28d6", "fullName": "tests.test_order_feed.TestOrderFeed#test_new_order_at_order_feed", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_order_feed"}, {"name": "subSuite", "value": "TestOrderFeed"}, {"name": "host", "value": "DESKTOP-BQIEDFR"}, {"name": "thread", "value": "19888-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_order_feed"}]}